@page "/"
@using System.IO;
@using DrinkWater.Components.ComponentModel
@rendermode InteractiveServer
@* @inject IJSRuntime JSRuntime *@

<PageTitle>Drink water!</PageTitle>

@* <EditForm Model="@waterIntakeGoal">
    <p>Set your daily goal (1-20 glasses):</p>
    <InputNumber @bind-Value="waterIntakeGoal.Goal" class="form-control" />
    <ValidationMessage For="@(() => waterIntakeGoal.Goal)" />
</EditForm> *@


<p>@countdownMessage</p>
<button @onclick="StartCountdown">Start 1 Minute Countdown</button>


<h1>Drink water!</h1>

<p role="status">Times I have drinked: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div>
    <button @onclick="@ToggleAlert">Show/Hide Phone Notification Reminder</button>
</div>

<div class="alert alert-primary @HideAlert" role="alert">
    @AlertContent
</div>  

@if (imageSources.Any())
{
    //for loop that will take the count++ and iterate 
    //until we go to the limit and we print out each time 
    //we iterate an image of a water bottle. 
    //This is taking more process but I only want to add one
    //more image each time I press "Times I have drinked" button.
    foreach (var src in imageSources)
    {
        <img src="@src" />
    }
}

@code {
    private string HideAlert { get; set; } = "d-none";
    private string AlertContent { get; set; } = "This is a primary alert—check it out!";
    
    private void ToggleAlert()
    {
        HideAlert = HideAlert == "" ? "d-none" : "";
        AlertContent = "Stay hydrated!";
    }


    private Timer? countdownTimer;
    private int remainingSeconds = 60;
    private string countdownMessage = "Click to start countdown";

    private void StartCountdown()
    {
        remainingSeconds = 60; // Reset the timer to 60 seconds
        countdownTimer?.Dispose(); // Dispose the existing timer if it's running
        countdownTimer = new Timer(UpdateCountdown, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void UpdateCountdown(object? state)
    {
        if (remainingSeconds > 0)
        {
            remainingSeconds--;
            countdownMessage = $"{remainingSeconds} Seconds Remaining";
        }
        else
        {
            countdownMessage = "Time to drink water!";
            countdownTimer?.Dispose();
        }

        InvokeAsync(StateHasChanged); // Re-render the component
    }
    

    private WaterIntakeGoal waterIntakeGoal = new();
    private string? imageSource;
    private int currentCount = 0;
    private List<string> imageSources = new();


    /// <summary>
    /// this counts times you press the button and runs the UpdateImage function.
    /// </summary>
    private void IncrementCount()
    {
        currentCount++; //Vi lägger till i count varje gång.
        UpdateImage();
    }

    /// <summary>
    /// Here we take the path to the image by using the UpdateImage function.
    /// </summary>
    private void UpdateImage() ///docstring
    {
        imageSources.Add($"images/image1.jpg"); //Bilden med url

        // int imageId = (int)Math.Ceiling((double)currentCount / waterIntakeGoal.Goal * 8);
        // imageId = Math.Min(imageId, 3);
        
        //imageSource = $"images/image1.jpg";
    }
}
